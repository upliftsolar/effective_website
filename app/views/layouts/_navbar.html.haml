%nav.navbar.navbar-expand-lg.navbar-light.bg-light
  = link_to(image_tag((ENV["LOGO"]||'logo.png'), alt: (ENV["LOGO_ALT"] || "Organization")), root_path, class: 'navbar-brand')

  %button.navbar-toggler{type: 'button', data: {toggle: 'collapse', target: '#navContent', 'aria-controls': 'navContent', 'aria-label': 'Toggle navigation'}}
    %span.navbar-toggler-icon

  #navContent.collapse.navbar-collapse
    %ul.navbar-nav.mr-auto
      - navbar_effective_pages = Effective::Page.where('layout LIKE ?', "%navbar%").or(Effective::Page.where('layout LIKE ?', 'application')).where("draft"=>false)
      - navbar_pages = Hash.new{|h,k| h[k] = [] }
      - navbar_pages.merge! navbar_effective_pages.select{|p| can?(:show, p) }.sort_by{|p| p.position rescue Rails.logger.error("for some reason, position is not avail: #{p.title}")}.compact.group_by(&:layout)
      - navbar_pages[ENV['PARTNERS_PAGE_TAB']] << ServiceProvider
      - navbar_pages[ENV['LEAD_PAGE_TAB']] << Lead
      - navbar_pages[ENV['COMMUNITIES_LIST_PAGE_TAB']] << Community
      - navbar_pages[ENV['QUESTIONS_PAGE_TAB']] << Question
      - navbar_pages[ENV['POSTS_PAGE_TAB']] << Effective::Post
      - navbar_pages.delete(nil) #in case some of ^^ aren't populated.
      - page_groups_ordered_by_lowest_contained_position = navbar_pages.sort_by{|l,ps| ps.map{|p| p.position rescue nil }.compact.min || 99 }
      - page_groups_ordered_by_lowest_contained_position.each do |(l,pages)|
        - if pages.length == 1
          = render_nav_link(pages.first)
        - elsif pages.length > 1
          %ul.navbar-nav
            = nav_dropdown(t(l+"_title")) do
              - for page in pages
                = render_nav_link(page)
                
             




      - if current_user&.communities.present?
        = nav_link_to t('manage_users_page_title'), communities_path


    %ul.navbar-nav
      - if current_user.present?
        = nav_dropdown(user_tag(current_user), right: true) do
          = nav_link_to 'Settings', user_settings_path

          - if can?(:access, :admin)
            = nav_divider
            = nav_link_to 'Site Admin', '/admin'
          = switch_language_option
          = nav_divider
          = nav_link_to 'Sign Out', destroy_user_session_path, method: :delete
      - else
        = nav_link_to 'Sign In', new_user_session_path
        = switch_language_option
